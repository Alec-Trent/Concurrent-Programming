/*
* NAME: Alec Trent                             USER ID: ajtrent
* DUE DATE: 03/16/2022
* PROGRAM ASSIGNMENT 3
* FILE NAME: README
* PROGRAM PURPOSE:
*		Answer questions reguarding the assignment.
* DAYS LATE: 0
* LATE DAYS REMAINING: 4
*/


Question 1:
Yes, it is possible to have a race condition when the threads are accessing 
the shared global array. To combat this we use a join to allow each thread 
to finish its operation/interaction with the array before allowing another to
do so. This garuntees us that previous thread will have calculated the values 
needed by later threads and should protect us from encountering a potential 
race condition.

Question 2:
No, we do not have control over the order in which threads run. For example:
	Should be	7  1  3  2  8  4  5 9
			7  8  4  5  10 12 9 14
			...

	But it could happen that it overwrites a value before the needed
	calculation as so:
		x[i]=	7  1  3  2  8  4  5  9
		x[i]=	7  8  3  2  8  4  5  9
		x[i]=	7  8  3  5  8  4  5  9
		x[i]=	7  8  11  5  8  4  5  9
		x[i]=	7  8  11  16  8  4  5  9
16 is not a valid answer to the problem and therefore it is not possible.
			
Question 3:
Yes, we can create n seperate arrays to hold the values and an additional 
array to store a bool which signifies completion. The threads would exist
in a loop structure of the total elements with a wait emphaisis on the
bool array. When the bool array reaches completion it will be reset 
and a new array will be used to store the next iteration of values.
This should effectivley achieve the same goal as using the 
2d temp array.

Question 4:
Given the input array from input1, 7 1 3 2 8 4 5 9
	has n = 2^k numbers, 8 = 2^3
create an array of 3+1 rows, and 8 columns
we then init the 0th row to the input array
	7 1 3 2 8 4 5 9
	0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0
we then iterate 3 times, for each
	create n (8) threads
	compare if < 0 copy else compute
	
	7 copy, 	valArray[0][1] + valArray[0][0]
	8=7+1, 		valArray[0][2] + valArray[0][1]
	4=1+3, 		valArray[0][3] + valArray[0][2]
	5=3+2, 		... etc
	10=2+8, 
	12=8+4, 
	9=4+5, 
	14=5+9

	7  1  3  2  8  4  5 9
	7  8  4  5  10 12 9 14
	0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0

	7 copy,
	8 copy,
	11=7+4, 
	13=8+5, 
	14=4+10, 
	17=5+12, 
	19=10+9, 
	26=12+14

	7  1  3  2  8  4  5  9
	7  8  4  5 10 12  9 14
	7  8 11 13 14 17 19 26
	0 0 0 0 0 0 0 0

	7 copy,
	8 copy,
	11 copy,
	13 copy,
	21=7+14, 
	25=8+17, 
	30=11+19, 
	39=13+26

	7  1  3  2  8  4  5  9
	7  8  4  5 10 12  9 14
	7  8 11 13 14 17 19 26
	7  8 11 13 21 25 30 39

	terminate n (8) threads

the final row is our result


